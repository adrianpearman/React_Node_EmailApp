{"version":3,"sources":["redux/actions/index.js","redux/actions/types.js","components/Payment.js","components/Header.js","components/Landing.js","components/surveyComponents/SurveyList.js","components/Dashboard.js","components/surveyComponents/SurveyField.js","utils/validateEmails.js","components/surveyComponents/formFields.js","components/surveyComponents/SurveyForm.js","components/surveyComponents/SurveyFormReview.js","components/surveyComponents/SurveyNew.js","components/App.js","redux/reducers/index.js","redux/reducers/authReducer.js","redux/reducers/surveyReducer.js","redux/store/index.js","index.js"],"names":["fetchUser","dispatch","a","axios","get","res","type","payload","data","handleToken","token","post","submitSurvey","values","history","push","fetchSurveys","Stripe","name","description","amount","props","stripeKey","process","className","Component","connect","actions","Header","this","auth","href","key","style","marginRight","to","margin","credits","paddingLeft","renderContent","Landing","textAlign","SurveyList","surveys","reverse","map","survey","_id","title","body","Date","dateSent","toLocaleDateString","yes","no","length","renderSurveys","Dashboard","input","label","meta","error","touched","marginBottom","re","Error","SurveyForm","_","FIELDS","Field","component","SurveyField","onSubmit","handleSubmit","onSurveySubmit","renderFields","reduxForm","validate","errors","recipients","emails","invalideEmails","split","email","trim","filter","test","validateEmails","each","form","destroyOnUnmount","state","formValues","surveyForm","withRouter","onCancel","reviewList","onClick","SurveyNew","formReview","SurveyFormReview","setState","App","exact","path","combineReducers","action","composeEnhancers","composeWithDevTools","middleWares","thunk","store","createStore","reducers","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.068c6fda.chunk.js","sourcesContent":["// axios is used to create our ajax requests\nimport axios from \"axios\";\nimport { FETCH_USER, FETCH_SURVEYS } from \"./types\";\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get(\"/api/current_user\");\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\n// this function will send a post request to the api and update the tokens\nexport const handleToken = token => async dispatch => {\n  const res = await axios.post(\"/api/stripe\", token);\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\n// this functionwill send the form data to server to be sent out as a n email\nexport const submitSurvey = (values, history) => async dispatch => {\n  const res = await axios.post(\"/api/surveys\", values);\n  // the history object will allow on submit to have the client redirected to './surveys'\n  history.push(\"/surveys\");\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchSurveys = () => async dispatch => {\n  const res = await axios.get(\"/api/surveys\");\n  dispatch({ type: FETCH_SURVEYS, payload: res.data });\n};\n","export const FETCH_USER = 'fetch_user';\nexport const FETCH_SURVEYS = 'fetch_surveys';\n","import React, { Component } from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../redux/actions\";\n\nclass Stripe extends Component {\n  render() {\n    return (\n      // Typically the StripeCheckout function will provide a default button. In order to change it to match the styling of the whole application, we add a button element as a child element and pass the material css class to add styling to the element.\n      <StripeCheckout\n        name=\"Email App\"\n        description=\"Please add credits to your account! $5 for 5 credits\"\n        amount={500} // this will dictate the amount need per credit. It will also default to $USD unless told. the amount avriable also requires the amount in cents\n        token={token => this.props.handleToken(token)} // this token keyword refers to the callback after we've redceived the callback from the strip api.\n        stripeKey={process.env.REACT_APP_STRIPE_KEY} // The public key from the .env.development file.\n      >\n        <button className=\"btn\">Add Credits</button>\n      </StripeCheckout>\n    );\n  }\n}\n\nexport default connect(null, actions)(Stripe);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Stripe from \"./Payment\";\n\nclass Header extends Component {\n  renderContent() {\n    switch (this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li>\n            <a href=\"/auth/google\">Log In with Google</a>\n          </li>\n        );\n      default:\n        return [\n          <li key=\"0\">\n            <button className=\"btn\" style={{ marginRight: \"5px\" }}>\n              <Link to=\"/surveys\">View Surveys</Link>\n            </button>\n          </li>,\n          <li key=\"1\">\n            <Stripe />\n          </li>,\n          <li key=\"2\" style={{ margin: \"0px 10px\" }}>\n            Credits: {this.props.auth.credits}\n          </li>,\n          <li key=\"3\">\n            <a href=\"/api/logout\">Log Out</a>\n          </li>\n        ];\n    }\n  }\n\n  render() {\n    return (\n      <nav>\n        <div className=\"nav-wrapper\">\n          <Link\n            // changes path based on whether user is logged in.\n            to={this.props.auth ? \"/surveys\" : \"/\"}\n            className=\"left brand-logo\"\n            style={{ paddingLeft: \"10px\" }}\n          >\n            Email App\n          </Link>\n          <ul className=\"right\">{this.renderContent()}</ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return { auth };\n}\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\n\nclass Landing extends Component {\n  render(){\n    return(\n      <div style={{textAlign: 'center'}}>\n        <h1>\n          Email Survey App\n        </h1>\n        Collect Feedback\n      </div>\n    )\n  }\n}\n\nexport default Landing\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchSurveys } from \"../../redux/actions\";\n\nclass SurveyList extends Component {\n  componentDidMount() {\n    this.props.fetchSurveys();\n  }\n\n  renderSurveys() {\n    // console.log(this.props.surveys);\n    return this.props.surveys.reverse().map(survey => {\n      return (\n        <div className=\"card darken-1\" key={survey._id}>\n          <div className=\"card-content\">\n            <span className=\"card-title\">{survey.title}</span>\n            <p>{survey.body}</p>\n            <p className=\"right\">\n              Sent On: {new Date(survey.dateSent).toLocaleDateString()}\n            </p>\n          </div>\n          <div className=\"card-action\">\n            <p>Yes: {survey.yes}</p>\n            <p>No: {survey.no}</p>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  // Version 1 - Will not work with this app (still no clue as too why?)\n  // render(){\n  //   return(\n  //     <div>\n  //       {this.renderSurveys()}\n  //     </div>\n  //   )\n  // }\n\n  // Version 2 - seems to work do to if statement redundancy metric.\n  render() {\n    if (this.props.surveys && this.props.surveys.length) {\n      return <div>{this.renderSurveys()}</div>;\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nfunction mapStateToProps({ surveys }) {\n  return { surveys };\n}\n\nexport default connect(mapStateToProps, { fetchSurveys })(SurveyList);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SurveyList from \"./surveyComponents/SurveyList\";\n\nconst Dashboard = () => {\n  return (\n    <div>\n      <SurveyList />\n      <div className=\"fixed-action-btn\">\n        <Link to=\"/surveys/new\" className=\"btn-floating btn-large blue\">\n          <i className=\"material-icons\">add</i>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","// contains logic to render a single label or input\n\nimport React from 'react'\n\nexport default({input, label, meta: {error, touched}}) => {\n  return(\n    <div>\n      <label>{label}</label>\n      <input {...input} style={{ marginBottom: '5px'}}/>\n      <div className='red-text' style={{ marginBottom: '20px'}}>\n        {touched && error}\n      </div>\n    </div>\n  )\n}\n","//validates the presence of accepatble email characters\nconst re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport default (emails) => {\n  const invalideEmails = emails\n  // seperates each email entry by the ','\n  .split(',')\n  // creates a new array with the excess space also removed\n  .map(email => email.trim())\n  //\n  .filter(email => !re.test(email)) //can be writtten also as (email => re.test(email === false))\n\n  if (invalideEmails.length) {\n    return `These emails are invalid: ${invalideEmails}`\n  }\n}\n","export default [\n  {label: 'Survey Title', name: 'title', Error: 'Survey Title cannot be blank, please submit a title.'},\n  {label: 'Subject Line', name: 'subject', Error: 'Subject line cannot be blank, please submit a subject line.'},\n  {label: 'Email Body', name: 'body', Error: 'Email body cannot be blank, please submit a value'},\n  {label: 'Recipient List', name: 'recipients', Error: 'No recipient selected, please submit a recipient.'}\n]\n","// This will show the form that user will input information\nimport React, { Component } from 'react';\n// the field property will format any html element\nimport { reduxForm, Field } from 'redux-form';\nimport SurveyField from './SurveyField';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport validateEmails from '../../utils/validateEmails';\nimport FIELDS from './formFields'; //the array of all the Field values\n\nclass SurveyForm extends Component{\n  // iterates through the FIELDS array an returns the corresponding values to the object keys\n  renderFields(){\n    return _.map(FIELDS, ({label, name}) => {\n      return (\n        <Field\n          key={name}\n          component={SurveyField} //renders the type of html element to be rendered\n          type='text'\n          label={label}\n          name={name} // tells the redux form the typed value and store it under a key of surveyTitle\n        />\n      )\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.props.handleSubmit(this.props.onSurveySubmit)}>\n        {this.renderFields()}\n        <Link to='/surveys' className='red btn-flat left white-text'>\n          Cancel\n        </Link>\n        <button type='Submit' className='teal btn-flat right white-text'>\n          Next\n          <i className='material-icons right'>done</i>\n        </button>\n      </form>\n      </div>\n    )\n  }\n}\n\nfunction validate(values){\n  const errors = {};\n\n  // validates whether or not the title contains valid information\n  // if (!values.title) {\n  //   errors.title = 'You must provide a Title'\n  // }\n  errors.recipients = validateEmails(values.recipients || '')\n\n  // validates the input for if they contain data. will return error if not properly done\n  _.each(FIELDS, ({ name, Error }) => {\n      if (!values[name]) {\n        errors[name] = Error\n      }\n  })\n\n  return errors\n}\n\nexport default reduxForm({\n  validate: validate,\n  form: 'surveyForm',\n  destroyOnUnmount: false //prevents the reduxForm deleteing the information when we toggle away from this page\n})(SurveyForm)\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport FIELDS from \"./formFields\";\nimport * as actions from \"../../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SurveyReview = ({ onCancel, formValues, submitSurvey, history }) => {\n  const reviewList = _.map(FIELDS, ({ name, label }) => {\n    return (\n      <div key={name}>\n        <label>{label}</label>\n        <div>{formValues[name]}</div>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h4>Please confirm your entries</h4>\n      {reviewList}\n      <button\n        className=\"yellow darken-3 btn-flat white-text\"\n        onClick={onCancel}\n      >\n        Back\n      </button>\n      <button\n        onClick={() => submitSurvey(formValues, history)}\n        className=\"green btn-flat right white-text\"\n      >\n        Send Surveys\n        <i className=\"material-icons right\">email</i>\n      </button>\n    </div>\n  );\n};\n\n// the values in this function are sent as prop values to surveyReview function due to the connect function given to us from the connect function\nfunction mapStateToProps(state) {\n  // console.log(state);\n  return {\n    formValues: state.form.surveyForm.values\n  };\n}\n\nexport default connect(mapStateToProps, actions)(withRouter(SurveyReview));\n","// This will show the new Survey Form and Survey Review\n\nimport React, { Component } from 'react';\nimport { reduxForm } from 'redux-form';\nimport SurveyForm from './SurveyForm';\nimport SurveyFormReview from './SurveyFormReview';\n\nclass SurveyNew extends Component{\n  // // Version 1\n  // constructor(){\n  //   super(props)\n  //   this.state = { new: true }\n  // }\n  \n  // Version 2 refactored\n  state = { formReview: false }\n\n  renderContent(){\n    if (this.state.formReview === true) {\n      return <SurveyFormReview\n        onCancel={() => this.setState({ formReview: false })}\n      />\n    }\n      return <SurveyForm onSurveySubmit={() => this.setState({ formReview: true })}/>\n  }\n\n  render(){\n    return(\n      <div>\n        { this.renderContent() }\n      </div>\n    )\n  }\n}\n\nexport default reduxForm({\n  form: 'surveyForm'\n})(SurveyNew)\n","import React, { Component } from \"react\";\n//  connect is used make redux work properly wit react\nimport { connect } from \"react-redux\";\n// this will import all of the action creators from the actions application.\nimport * as actions from \"../redux/actions\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport Landing from \"./Landing\";\nimport Dashboard from \"./Dashboard\";\nimport SurveyNew from \"./surveyComponents/SurveyNew\";\n\nclass App extends Component {\n  // this version includes life cycle methods to automatically load the current user as soon as the component is rendered\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <BrowserRouter>\n          <div>\n            <Header />\n            <Route exact={true} path=\"/\" component={Landing} />\n            <Route exact={true} path=\"/surveys\" component={Dashboard} />\n            <Route path=\"/surveys/new\" component={SurveyNew} />\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);\n","import { combineReducers } from 'redux';\nimport { reducer as reduxForm } from 'redux-form';\nimport authReducer from './authReducer';\nimport surveyReducer from './surveyReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  form: reduxForm,\n  surveys: surveyReducer\n})\n","import { FETCH_USER } from \"../actions/types\";\n\n// this will verify if the user is logged in\n// using null as the first argument will cause the action to return nothing at first\nexport default function(state = null, action) {\n  // console.log(action);\n  switch (action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}\n","import { FETCH_SURVEYS } from \"../actions/types\";\n\nexport default function(state = {}, action) {\n  //state set to empty and then load request will fetch the data\n  switch (action.type) {\n    case FETCH_SURVEYS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"../reducers\";\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst middleWares = [thunk];\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(...middleWares))\n);\n\nexport default store;\n","import \"materialize-css/dist/css/materialize.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\n\nconst RootApp = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<RootApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}